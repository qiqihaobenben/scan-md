# 项目背景
这是一个基于 Node.js 和 TypeScript 开发的跨平台命令行工具项目，需严格类型检查和模块化设计。

# 编码标准
- **语言规范**:
  - TypeScript 5.3+ 严格模式（`strict: true`）
  - 禁止使用 `any`，必须显式类型注解
  - 接口命名前缀 `I`（如 `IConfig`）
  - 泛型参数使用大写字母（如 `T`/`K`/`V`）
- **工具链**:
  - 编译工具: `tsx` 或 `ts-node`
  - 打包工具: `esbuild` + `pkg`

# 技术栈
- **核心库**:
  - 命令行解析: `commander` + `@commander-js/extra-typings`
  - 交互验证: `zod` + `inquirer`
  - 错误处理: `ts-results` 或 `neverthrow`
- **测试框架**:
  - `vitest` + `@vitest/coverage-v8`
  - 类型测试: `tsd`

# 文件结构
- `src/`
  - `cli.ts`        # 命令行入口（需包含 `#!/usr/bin/env node`）
  - `types/`        # 类型定义（`.d.ts`）
  - `utils/`        # 工具函数（需通过 `zod` 校验输入）
- `test/`
  - `unit/`         # 单元测试
  - `e2e/`          # 端到端测试

# 类型安全规范
1. **参数解析**:
```typescript
// 示例：使用 zod 强化类型校验
import { z } from 'zod';
const flagsSchema = z.object({
  verbose: z.boolean().default(false),
  port: z.number().min(1024).max(65535)
});
program.opts().pipe(flagsSchema.parse);  // 运行时类型校验
